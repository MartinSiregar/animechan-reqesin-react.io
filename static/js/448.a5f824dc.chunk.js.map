{"version":3,"file":"static/js/448.a5f824dc.chunk.js","mappings":"gJAEA,MAeA,EAfsBA,IACpB,MAAMC,EAAMD,EAAS,gDAAAE,OAC+BC,mBAAmBH,IACnE,0CAEJ,OAAO,IAAII,SAAQC,MAAOC,EAASC,KACjC,IAEED,SADuBE,EAAAA,EAAMC,IAAIR,IAChBS,KACnB,CAAE,MAAOC,GACPJ,EAAOI,EACT,IACA,C,qGCVJ,MAmEA,EAnEkBC,KAChB,MAAOA,EAAWC,IAAgBC,EAAAA,EAAAA,UAAS,KAE3CC,EAAAA,EAAAA,YAAU,KACRC,GAAe,GACd,IAEH,MAAMA,EAAgBX,UACpB,MAAMY,EAAeC,aAAaC,QAAQ,aAC1C,IAAKF,EAAc,CAEjB,IACE,MAAMG,QAAkBC,EAAAA,EAAAA,GAAarB,GACrCa,EAAa,CAACO,GAChB,CAAE,MAAOT,GACPW,QAAQX,MAAM,wBAAyBA,EACzC,CAEA,MAAMY,EAAgBX,EACtBM,aAAaM,QAAQ,YAAaC,KAAKC,UAAUH,IACjDN,EAAeQ,KAAKC,UAAUH,EAChC,CACAV,EAAaY,KAAKE,MAAMV,GAAc,EAUlCW,EAAU,CACd,CACEC,MAAO,QACPC,UAAW,QACXC,IAAK,SAEP,CACEF,MAAO,YACPC,UAAW,YACXC,IAAK,aAEP,CACEF,MAAO,QACPC,UAAW,QACXC,IAAK,SAEP,CACEF,MAAO,SACPE,IAAK,SACLC,OAAQA,CAACC,EAAMC,KACbC,EAAAA,EAAAA,KAACC,EAAAA,GAAM,CAACC,KAAK,OAAOC,QAASA,IA1BLC,KAC5B,MAAMC,EAAgB5B,EAAU6B,QAAQC,GAAUA,IAAUH,IAC5D1B,EAAa2B,GACbtB,aAAaM,QAAQ,YAAaC,KAAKC,UAAUc,GAAe,EAuBzBG,CAAqBT,GAAQU,SAAC,aAOvE,OACEC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACET,EAAAA,EAAAA,KAAA,MAAAS,SAAI,qBACJT,EAAAA,EAAAA,KAACW,EAAAA,EAAK,CAACC,WAAYnC,EAAWgB,QAASA,EAASoB,YAAY,EAAOC,UAAQ,EAACC,OAAShB,GAAWA,EAAOQ,UACnG,C","sources":["api/getRandQuote.js","components/FavQuotes.js"],"sourcesContent":["import axios from 'axios';\n\nconst getRandQuote = (animeName) => {\n  const url = animeName\n    ? `https://animechan.xyz/api/quotes/random?name=${encodeURIComponent(animeName)}`\n    : 'https://animechan.xyz/api/quotes/random';\n\n  return new Promise(async (resolve, reject) => {\n    try {\n      const response = await axios.get(url);\n      resolve(response.data);\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\n\nexport default getRandQuote;\n","import React, { useState, useEffect } from 'react';\nimport { Table, Button } from 'antd';\nimport getRandQuote from '../api/getRandQuote';\n\nconst FavQuotes = () => {\n  const [FavQuotes, setFavQuotes] = useState([]);\n\n  useEffect(() => {\n    loadFavQuotes();\n  }, []);\n\n  const loadFavQuotes = async (animeName) => {\n    const storedQuotes = localStorage.getItem('FavQuotes');\n    if (!storedQuotes) {\n\n      try {\n        const quoteData = await getRandQuote(animeName);\n        setFavQuotes([quoteData]);\n      } catch (error) {\n        console.error('Error fetching quote:', error);\n      }\n\n      const defaultQuotes = FavQuotes;\n      localStorage.setItem('FavQuotes', JSON.stringify(defaultQuotes));\n      storedQuotes = JSON.stringify(defaultQuotes);\n    }\n    setFavQuotes(JSON.parse(storedQuotes));\n\n  };\n\n  const handleRemoveFavorite = (quoteToRemove) => {\n    const updatedQuotes = FavQuotes.filter((quote) => quote !== quoteToRemove);\n    setFavQuotes(updatedQuotes);\n    localStorage.setItem('FavQuotes', JSON.stringify(updatedQuotes));\n  };\n\n  const columns = [\n    {\n      title: 'Anime',\n      dataIndex: 'anime',\n      key: 'anime',\n    },\n    {\n      title: 'Character',\n      dataIndex: 'character',\n      key: 'character',\n    },\n    {\n      title: 'Quote',\n      dataIndex: 'quote',\n      key: 'quote',\n    },\n    {\n      title: 'Action',\n      key: 'action',\n      render: (text, record) => (\n        <Button type=\"link\" onClick={() => handleRemoveFavorite(record)}>\n          Remove\n        </Button>\n      ),\n    },\n  ];\n\n  return (\n    <div>\n      <h1>Favorite Quotes</h1>\n      <Table dataSource={FavQuotes} columns={columns} pagination={false} bordered rowKey={(record) => record.quote} />\n    </div>\n  );\n};\n\nexport default FavQuotes;\n"],"names":["animeName","url","concat","encodeURIComponent","Promise","async","resolve","reject","axios","get","data","error","FavQuotes","setFavQuotes","useState","useEffect","loadFavQuotes","storedQuotes","localStorage","getItem","quoteData","getRandQuote","console","defaultQuotes","setItem","JSON","stringify","parse","columns","title","dataIndex","key","render","text","record","_jsx","Button","type","onClick","quoteToRemove","updatedQuotes","filter","quote","handleRemoveFavorite","children","_jsxs","Table","dataSource","pagination","bordered","rowKey"],"sourceRoot":""}